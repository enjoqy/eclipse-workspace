### set log levels - for more verbose logging change 'info' to 'debug'  ###
# 等级从高到低为 ： OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
log4j.rootLogger=debug, stdout, file


### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.debug
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

### direct messages to file mylog.log ###
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=c:\mylog.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
# %c 输出所属的类目，通常就是所在类的全名；
# %L 输出日志事件的发生位置，及在代码中的行数
# %m 输出代码中指定的消息；
# %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
# %M 输出打印该条日志的方法名；
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
# %r 输出自应用启动到输出该log信息耗费的毫秒数；
# %t 输出产生该日志事件的线程名；
# %L 输出日志事件的发生位置，及在代码中的行数；


